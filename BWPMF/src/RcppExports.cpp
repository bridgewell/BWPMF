// This file was generated by Rcpp::compileAttributes
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

// set_K
void set_K(int K);
RcppExport SEXP BWPMF_set_K(SEXP KSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< int >::type K(KSEXP);
    set_K(K);
    return R_NilValue;
END_RCPP
}
// serialize_cookie
SEXP serialize_cookie(SEXP Rpath);
RcppExport SEXP BWPMF_serialize_cookie(SEXP RpathSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< SEXP >::type Rpath(RpathSEXP);
    __result = Rcpp::wrap(serialize_cookie(Rpath));
    return __result;
END_RCPP
}
// deserialize_cookie_raw
void deserialize_cookie_raw(RawVector src);
RcppExport SEXP BWPMF_deserialize_cookie_raw(SEXP srcSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< RawVector >::type src(srcSEXP);
    deserialize_cookie_raw(src);
    return R_NilValue;
END_RCPP
}
// deserialize_cookie_path
void deserialize_cookie_path(const std::string& path);
RcppExport SEXP BWPMF_deserialize_cookie_path(SEXP pathSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< const std::string& >::type path(pathSEXP);
    deserialize_cookie_path(path);
    return R_NilValue;
END_RCPP
}
// serialize_hostname
SEXP serialize_hostname(SEXP Rpath);
RcppExport SEXP BWPMF_serialize_hostname(SEXP RpathSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< SEXP >::type Rpath(RpathSEXP);
    __result = Rcpp::wrap(serialize_hostname(Rpath));
    return __result;
END_RCPP
}
// deserialize_hostname_raw
void deserialize_hostname_raw(RawVector src);
RcppExport SEXP BWPMF_deserialize_hostname_raw(SEXP srcSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< RawVector >::type src(srcSEXP);
    deserialize_hostname_raw(src);
    return R_NilValue;
END_RCPP
}
// deserialize_hostname_path
void deserialize_hostname_path(const std::string& path);
RcppExport SEXP BWPMF_deserialize_hostname_path(SEXP pathSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< const std::string& >::type path(pathSEXP);
    deserialize_hostname_path(path);
    return R_NilValue;
END_RCPP
}
// query_cookie
SEXP query_cookie(CharacterVector cookie);
RcppExport SEXP BWPMF_query_cookie(SEXP cookieSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< CharacterVector >::type cookie(cookieSEXP);
    __result = Rcpp::wrap(query_cookie(cookie));
    return __result;
END_RCPP
}
// query_hostname
SEXP query_hostname(CharacterVector hostname);
RcppExport SEXP BWPMF_query_hostname(SEXP hostnameSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< CharacterVector >::type hostname(hostnameSEXP);
    __result = Rcpp::wrap(query_hostname(hostname));
    return __result;
END_RCPP
}
// count_cookie
SEXP count_cookie();
RcppExport SEXP BWPMF_count_cookie() {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    __result = Rcpp::wrap(count_cookie());
    return __result;
END_RCPP
}
// count_hostname
SEXP count_hostname();
RcppExport SEXP BWPMF_count_hostname() {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    __result = Rcpp::wrap(count_hostname());
    return __result;
END_RCPP
}
// clean_cookie
void clean_cookie();
RcppExport SEXP BWPMF_clean_cookie() {
BEGIN_RCPP
    Rcpp::RNGScope __rngScope;
    clean_cookie();
    return R_NilValue;
END_RCPP
}
// clean_hostname
void clean_hostname();
RcppExport SEXP BWPMF_clean_hostname() {
BEGIN_RCPP
    Rcpp::RNGScope __rngScope;
    clean_hostname();
    return R_NilValue;
END_RCPP
}
// encode
void encode(const std::string& path, size_t user_visit_lower_bound, double progress);
RcppExport SEXP BWPMF_encode(SEXP pathSEXP, SEXP user_visit_lower_boundSEXP, SEXP progressSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< const std::string& >::type path(pathSEXP);
    Rcpp::traits::input_parameter< size_t >::type user_visit_lower_bound(user_visit_lower_boundSEXP);
    Rcpp::traits::input_parameter< double >::type progress(progressSEXP);
    encode(path, user_visit_lower_bound, progress);
    return R_NilValue;
END_RCPP
}
// encode_data
SEXP encode_data(const std::string& path, double progress);
RcppExport SEXP BWPMF_encode_data(SEXP pathSEXP, SEXP progressSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< const std::string& >::type path(pathSEXP);
    Rcpp::traits::input_parameter< double >::type progress(progressSEXP);
    __result = Rcpp::wrap(encode_data(path, progress));
    return __result;
END_RCPP
}
// serialize_history
SEXP serialize_history(SEXP Rhistory, SEXP Rpath);
RcppExport SEXP BWPMF_serialize_history(SEXP RhistorySEXP, SEXP RpathSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< SEXP >::type Rhistory(RhistorySEXP);
    Rcpp::traits::input_parameter< SEXP >::type Rpath(RpathSEXP);
    __result = Rcpp::wrap(serialize_history(Rhistory, Rpath));
    return __result;
END_RCPP
}
// deserialize_history_raw
SEXP deserialize_history_raw(RawVector src);
RcppExport SEXP BWPMF_deserialize_history_raw(SEXP srcSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< RawVector >::type src(srcSEXP);
    __result = Rcpp::wrap(deserialize_history_raw(src));
    return __result;
END_RCPP
}
// deserialize_history_path
SEXP deserialize_history_path(const std::string& path);
RcppExport SEXP BWPMF_deserialize_history_path(SEXP pathSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< const std::string& >::type path(pathSEXP);
    __result = Rcpp::wrap(deserialize_history_path(path));
    return __result;
END_RCPP
}
// print_history
void print_history(SEXP Rhistory);
RcppExport SEXP BWPMF_print_history(SEXP RhistorySEXP) {
BEGIN_RCPP
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< SEXP >::type Rhistory(RhistorySEXP);
    print_history(Rhistory);
    return R_NilValue;
END_RCPP
}
// check_history
NumericVector check_history(SEXP Rhistory);
RcppExport SEXP BWPMF_check_history(SEXP RhistorySEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< SEXP >::type Rhistory(RhistorySEXP);
    __result = Rcpp::wrap(check_history(Rhistory));
    return __result;
END_RCPP
}
// count_non_zero_of_history
size_t count_non_zero_of_history(SEXP Rhistory);
RcppExport SEXP BWPMF_count_non_zero_of_history(SEXP RhistorySEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< SEXP >::type Rhistory(RhistorySEXP);
    __result = Rcpp::wrap(count_non_zero_of_history(Rhistory));
    return __result;
END_RCPP
}
// count_cookie_history
size_t count_cookie_history(SEXP Rhistory);
RcppExport SEXP BWPMF_count_cookie_history(SEXP RhistorySEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< SEXP >::type Rhistory(RhistorySEXP);
    __result = Rcpp::wrap(count_cookie_history(Rhistory));
    return __result;
END_RCPP
}
// count_hostname_history
size_t count_hostname_history(SEXP Rhistory);
RcppExport SEXP BWPMF_count_hostname_history(SEXP RhistorySEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< SEXP >::type Rhistory(RhistorySEXP);
    __result = Rcpp::wrap(count_hostname_history(Rhistory));
    return __result;
END_RCPP
}
// extract_history
SEXP extract_history(SEXP Rhistory, NumericVector id);
RcppExport SEXP BWPMF_extract_history(SEXP RhistorySEXP, SEXP idSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< SEXP >::type Rhistory(RhistorySEXP);
    Rcpp::traits::input_parameter< NumericVector >::type id(idSEXP);
    __result = Rcpp::wrap(extract_history(Rhistory, id));
    return __result;
END_RCPP
}
// test_list_of_list
void test_list_of_list();
RcppExport SEXP BWPMF_test_list_of_list() {
BEGIN_RCPP
    Rcpp::RNGScope __rngScope;
    test_list_of_list();
    return R_NilValue;
END_RCPP
}
// test_phi
void test_phi(SEXP Rphi, SEXP Rhistory);
RcppExport SEXP BWPMF_test_phi(SEXP RphiSEXP, SEXP RhistorySEXP) {
BEGIN_RCPP
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< SEXP >::type Rphi(RphiSEXP);
    Rcpp::traits::input_parameter< SEXP >::type Rhistory(RhistorySEXP);
    test_phi(Rphi, Rhistory);
    return R_NilValue;
END_RCPP
}
// print_phi_index
void print_phi_index(SEXP Rphi);
RcppExport SEXP BWPMF_print_phi_index(SEXP RphiSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< SEXP >::type Rphi(RphiSEXP);
    print_phi_index(Rphi);
    return R_NilValue;
END_RCPP
}
// print_history_index
void print_history_index(SEXP Rhistory);
RcppExport SEXP BWPMF_print_history_index(SEXP RhistorySEXP) {
BEGIN_RCPP
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< SEXP >::type Rhistory(RhistorySEXP);
    print_history_index(Rhistory);
    return R_NilValue;
END_RCPP
}
// dump_phi
NumericMatrix dump_phi(SEXP Rphi);
RcppExport SEXP BWPMF_dump_phi(SEXP RphiSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< SEXP >::type Rphi(RphiSEXP);
    __result = Rcpp::wrap(dump_phi(Rphi));
    return __result;
END_RCPP
}
// init_phi
SEXP init_phi(SEXP Rmodel, SEXP Rhistory, const std::string& cached_file);
RcppExport SEXP BWPMF_init_phi(SEXP RmodelSEXP, SEXP RhistorySEXP, SEXP cached_fileSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< SEXP >::type Rmodel(RmodelSEXP);
    Rcpp::traits::input_parameter< SEXP >::type Rhistory(RhistorySEXP);
    Rcpp::traits::input_parameter< const std::string& >::type cached_file(cached_fileSEXP);
    __result = Rcpp::wrap(init_phi(Rmodel, Rhistory, cached_file));
    return __result;
END_RCPP
}
// train_once
void train_once(SEXP Rmodel, SEXP Rhistory, SEXP Rphi, Function logger);
RcppExport SEXP BWPMF_train_once(SEXP RmodelSEXP, SEXP RhistorySEXP, SEXP RphiSEXP, SEXP loggerSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< SEXP >::type Rmodel(RmodelSEXP);
    Rcpp::traits::input_parameter< SEXP >::type Rhistory(RhistorySEXP);
    Rcpp::traits::input_parameter< SEXP >::type Rphi(RphiSEXP);
    Rcpp::traits::input_parameter< Function >::type logger(loggerSEXP);
    train_once(Rmodel, Rhistory, Rphi, logger);
    return R_NilValue;
END_RCPP
}
// pmf_logloss
double pmf_logloss(SEXP Rmodel, SEXP Rhistory);
RcppExport SEXP BWPMF_pmf_logloss(SEXP RmodelSEXP, SEXP RhistorySEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< SEXP >::type Rmodel(RmodelSEXP);
    Rcpp::traits::input_parameter< SEXP >::type Rhistory(RhistorySEXP);
    __result = Rcpp::wrap(pmf_logloss(Rmodel, Rhistory));
    return __result;
END_RCPP
}
